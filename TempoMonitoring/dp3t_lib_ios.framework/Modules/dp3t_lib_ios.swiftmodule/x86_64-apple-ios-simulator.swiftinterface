// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name dp3t_lib_ios
import BackgroundTasks
import CommonCrypto
import CoreBluetooth
import Foundation
import SQLite
import Security
import SnapKit
import Swift
import SwiftJWT
import SwiftProtobuf
import TextFieldEffects
import UIKit.UIApplication
import UIKit
import UserNotifications
import WebKit
@_exported import dp3t_lib_ios
import os
public protocol UBRawRepresentable : Swift.RawRepresentable, dp3t_lib_ios.UBUserDefaultsRetrievable, dp3t_lib_ios.UBUserDefaultsStorable {
}
extension UBRawRepresentable {
  public func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
  public static func retrieve(from userDefaults: Foundation.UserDefaults, key: Swift.String, defaultValue: Self) -> Self
  public static func retrieveOptional(from _: Foundation.UserDefaults, key: Swift.String) -> Self?
}
public typealias UBCodable = dp3t_lib_ios.UBDecodable & dp3t_lib_ios.UBEncodable
public protocol UBEncodable : Swift.Encodable, dp3t_lib_ios.UBUserDefaultsStorable {
}
extension UBEncodable {
  public func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
}
public protocol UBDecodable : Swift.Decodable, dp3t_lib_ios.UBUserDefaultsRetrievable {
}
extension UBDecodable {
  public static func retrieve(from userDefaults: Foundation.UserDefaults, key: Swift.String, defaultValue: Self) -> Self
  public static func retrieveOptional(from userDefaults: Foundation.UserDefaults, key: Swift.String) -> Self?
}
public enum NSLabelType : dp3t_lib_ios.UBLabelType {
  case title
  case textLight
  case textBold
  case button
  case uppercaseBold
  case date
  case smallRegular
  public var font: UIKit.UIFont {
    get
  }
  public var textColor: UIKit.UIColor {
    get
  }
  public var lineSpacing: CoreGraphics.CGFloat {
    get
  }
  public var letterSpacing: CoreGraphics.CGFloat? {
    get
  }
  public var isUppercased: Swift.Bool {
    get
  }
  public var hyphenationFactor: Swift.Float {
    get
  }
  public var lineBreakMode: UIKit.NSLineBreakMode {
    get
  }
  public static func == (a: dp3t_lib_ios.NSLabelType, b: dp3t_lib_ios.NSLabelType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct DP3TParameters : Swift.Codable {
  public var bluetooth: dp3t_lib_ios.DP3TParameters.Bluetooth
  public var crypto: dp3t_lib_ios.DP3TParameters.Crypto
  public var networking: dp3t_lib_ios.DP3TParameters.Networking
  public var contactMatching: dp3t_lib_ios.DP3TParameters.ContactMatching
  public var proximity: dp3t_lib_ios.DP3TParameters.Proximity
  public struct Bluetooth : Swift.Codable {
    public var serviceUUID: Swift.String
    public var characteristicsUUID: Swift.String
    public var peripheralReconnectDelay: Swift.Int
    public var peripheralDisposeInterval: Swift.Double
    public var peripheralDisposeIntervalSinceDiscovery: Swift.Double
    public var peripheralStateRestorationDiscoveryOffset: Swift.Double
    public var rssiValueRequirement: Swift.Int
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Crypto : Swift.Codable {
    public var keyLength: Swift.Int
    public var numberOfDaysToKeepData: Swift.Int
    public var numberOfEpochsPerDay: Swift.Int
    public var secondsPerEpoch: Swift.Double
    public var broadcastKey: Foundation.Data
    public var timeZone: Foundation.TimeZone
    public var contactsThreshold: Swift.Int
    public var numberOfDaysToKeepMatchedContacts: Swift.Int
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Networking : Swift.Codable {
    public var timeShiftThreshold: Swift.Double
    public var batchLength: Swift.Double
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct ContactMatching : Swift.Codable {
    public var defaultTxPowerLevel: Swift.Double
    public var contactAttenuationThreshold: Swift.Double
    public var numberOfWindowsForExposure: Swift.Int
    public var windowDuration: Swift.Double
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Proximity : Swift.Codable {
    public var defaultDistance: Swift.Double
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol UBServerTrustEvaluator {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class UBDefaultTrustEvaluator : dp3t_lib_ios.UBServerTrustEvaluator {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class UBPinnedCertificatesTrustEvaluator : dp3t_lib_ios.UBServerTrustEvaluator {
  public init(certificates: [Security.SecCertificate] = Bundle.main.ub_certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class UBDisabledEvaluator : dp3t_lib_ios.UBServerTrustEvaluator {
  public init()
  final public func evaluate(_: Security.SecTrust, forHost _: Swift.String) throws
  @objc deinit
}
extension Bundle {
  public var ub_certificates: [Security.SecCertificate] {
    get
  }
}
public struct UBDeviceUUID {
  public static func getUUID() -> Swift.String
}
extension DP3TTracingError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension DP3TNetworkingError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol UBLabelType {
  var font: UIKit.UIFont { get }
  var textColor: UIKit.UIColor { get }
  var lineSpacing: CoreGraphics.CGFloat { get }
  var letterSpacing: CoreGraphics.CGFloat? { get }
  var isUppercased: Swift.Bool { get }
  var hyphenationFactor: Swift.Float { get }
  var lineBreakMode: UIKit.NSLineBreakMode { get }
}
public enum InfectionStatus {
  case healthy
  case exposed(days: [dp3t_lib_ios.ExposureDay])
  case infected
}
public enum TrackingState {
  case active
  case stopped
  case inactive(error: dp3t_lib_ios.DP3TTracingError)
}
public enum ProximityStatus {
  case close(distance: Swift.Double)
  case far
}
public struct TracingState {
  public var numberOfHandshakes: Swift.Int
  public var numberOfProximities: Swift.Int
  public var numberOfContacts: Swift.Int
  public var trackingState: dp3t_lib_ios.TrackingState
  public var lastSync: Foundation.Date?
  public var infectionStatus: dp3t_lib_ios.InfectionStatus
  public var proximityStatus: dp3t_lib_ios.ProximityStatus
  public var backgroundRefreshState: UIKit.UIBackgroundRefreshStatus
}
public protocol DP3TTracingDelegate : AnyObject {
  func DP3TTracingStateChanged(_ state: dp3t_lib_ios.TracingState)
  func didAddProximity(_ proximity: dp3t_lib_ios.ProximityModel)
}
public enum DP3TApplicationInfo {
  case discovery(_: Swift.String, enviroment: dp3t_lib_ios.Enviroment = .prod)
  case manual(_: dp3t_lib_ios.ApplicationDescriptor)
}
public enum DP3TTracing {
  public static let frameworkVersion: Swift.String
  public static var parameters: dp3t_lib_ios.DP3TParameters {
    get
    set
  }
  public static func initialize(with appInfo: dp3t_lib_ios.DP3TApplicationInfo, urlSession: Foundation.URLSession = .shared, mode: dp3t_lib_ios.DP3TMode = .production) throws
  public static func updateUserData(_ user: dp3t_lib_ios.UserData)
  public static var delegate: dp3t_lib_ios.DP3TTracingDelegate? {
    get
    set
  }
  public static func startTracing() throws
  public static func stopTracing()
  public static func sync(callback: ((Swift.Result<Swift.Void, dp3t_lib_ios.DP3TTracingError>) -> Swift.Void)?)
  public static func syncProximities()
  public static func status(callback: (Swift.Result<dp3t_lib_ios.TracingState, dp3t_lib_ios.DP3TTracingError>) -> Swift.Void)
  public static func iWasConfirmed(onset: Foundation.Date, authentication: dp3t_lib_ios.ExposeeAuthMethod, isFakeRequest: Swift.Bool = false, callback: @escaping (Swift.Result<Swift.Void, dp3t_lib_ios.DP3TTracingError>) -> Swift.Void)
  public static func reset() throws
}
public struct UserFormData {
  public init(name: Swift.String? = nil, phone: Swift.String? = nil, country: Swift.String? = nil, idType: Swift.String? = nil, userId: Swift.String? = nil)
}
@propertyWrapper public struct UBUserDefault<T> where T : dp3t_lib_ios.UBUserDefaultsRetrievable, T : dp3t_lib_ios.UBUserDefaultsStorable {
  public let key: Swift.String
  public let defaultValue: T
  public init(key: Swift.String, defaultValue: T, userDefaults: Foundation.UserDefaults = .standard)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct UBOptionalUserDefault<T> where T : dp3t_lib_ios.UBUserDefaultsRetrievable, T : dp3t_lib_ios.UBUserDefaultsStorable {
  public let key: Swift.String
  public init(key: Swift.String, userDefaults: Foundation.UserDefaults = .standard)
  public var wrappedValue: T? {
    get
    set
  }
}
public enum DP3TMode : Swift.Equatable {
  case production
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: dp3t_lib_ios.DP3TMode, b: dp3t_lib_ios.DP3TMode) -> Swift.Bool
}
public struct ExposureDay : Swift.Equatable {
  public let identifier: Swift.Int
  public let exposedDate: Foundation.Date
  public let reportDate: Foundation.Date
  public static func == (a: dp3t_lib_ios.ExposureDay, b: dp3t_lib_ios.ExposureDay) -> Swift.Bool
}
public struct HandshakeModel {
  public var identifier: Swift.Int?
  public let timestamp: Foundation.Date
  public let ephID: dp3t_lib_ios.EphID
  public let TXPowerlevel: Swift.Double?
  public let RSSI: Swift.Double?
  public var distance: Swift.Double? {
    get
  }
}
extension HandshakeModel : Swift.Equatable {
  public static func == (a: dp3t_lib_ios.HandshakeModel, b: dp3t_lib_ios.HandshakeModel) -> Swift.Bool
}
public enum ExposeeAuthMethod {
  case none
  case JSONPayload(token: Swift.String)
  case HTTPAuthorizationBearer(token: Swift.String)
}
public typealias EphID = Foundation.Data
public enum UBKeychainAccessibility {
  case whenUnlocked
  case afterFirstUnlock
  @available(iOS 8.0, OSX 10.10, *)
  case whenPasscodeSetThisDeviceOnly
  case whenUnlockedThisDeviceOnly
  case afterFirstUnlockThisDeviceOnly
}
extension UBKeychainAccessibility : Swift.RawRepresentable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public struct ProximityData : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ProximityModel {
  public var identifier: Swift.Int?
  public let ephID: dp3t_lib_ios.EphID
  public let timestamp: Foundation.Date
  public var latitude: Swift.Double?
  public var longitude: Swift.Double?
  public var accuracy: Swift.Double?
  public let distance: Swift.Double
}
extension ProximityModel : Swift.Equatable {
  public static func == (a: dp3t_lib_ios.ProximityModel, b: dp3t_lib_ios.ProximityModel) -> Swift.Bool
}
public class AmigoContactTracing {
  public static let shared: dp3t_lib_ios.AmigoContactTracing
  public var closeDelegate: dp3t_lib_ios.OnTracingViewClose?
  public init()
  public func setLaunchOptions(_ launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func launch(launcherController: UIKit.UINavigationController? = nil, userData: dp3t_lib_ios.UserFormData? = nil, themeColor: UIKit.UIColor? = nil)
  public func applicationDidEnterBackground()
  public func applicationWillEnterForeground()
  @objc deinit
}
public protocol OnTracingViewClose {
  func onClose()
}
public enum DP3TTracingError : Swift.Error {
  case networkingError(error: dp3t_lib_ios.DP3TNetworkingError)
  case caseSynchronizationError(errors: [Swift.Error])
  case cryptographyError(error: Swift.String)
  case databaseError(error: Swift.Error?)
  case coreBluetoothError(error: Swift.Error)
  case bluetoothTurnedOff
  case permissonError
  case userAlreadyMarkedAsInfected
}
public enum DP3TNetworkingError : Swift.Error {
  case networkSessionError(error: Swift.Error)
  case notHTTPResponse
  case HTTPFailureResponse(status: Swift.Int)
  case noDataReturned
  case couldNotParseData(error: Swift.Error, origin: Swift.Int)
  case couldNotEncodeBody
  case batchReleaseTimeMissmatch
  case timeInconsistency(shift: Foundation.TimeInterval)
  case jwtSignatureError(code: Swift.Int, debugDescription: Swift.String)
  public var errorCode: Swift.Int {
    get
  }
}
@propertyWrapper public struct UBKeychainStored {
  public let key: Swift.String
  public let accessibility: dp3t_lib_ios.UBKeychainAccessibility
  public init(key: Swift.String, accessibility: dp3t_lib_ios.UBKeychainAccessibility)
  public var wrappedValue: Swift.String? {
    get
    set
  }
}
public struct ApplicationDescriptor : Swift.Codable {
  public init(appId: Swift.String, bucketBaseUrl: Foundation.URL, reportBaseUrl: Foundation.URL, jwtPublicKey: Foundation.Data?, deviceId: Swift.String, userData: dp3t_lib_ios.UserData? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 11.0, *)
public protocol DP3TClaims : SwiftJWT.Claims {
  var iss: Swift.String { get }
  var iat: Foundation.Date { get }
  var exp: Foundation.Date { get }
  var hashAlg: Swift.String { get }
  var contentHash: Swift.String { get }
}
public class DP3TJWTVerifier {
  final public let jwtTokenHeaderKey: Swift.String
  @available(iOS 11.0, *)
  public init(publicKey: Foundation.Data, jwtTokenHeaderKey: Swift.String)
  @available(iOS 11.0, *)
  @discardableResult
  public func verify<ClaimType>(claimType: ClaimType.Type, httpResponse: Foundation.HTTPURLResponse, httpBody: Foundation.Data, claimsLeeway _: Foundation.TimeInterval = 10) throws -> ClaimType where ClaimType : dp3t_lib_ios.DP3TClaims
  @objc deinit
}
extension URL : SQLite.Value {
  public typealias Datatype = Swift.String
  public static let declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.String) -> Foundation.URL
  public var datatypeValue: Swift.String {
    get
  }
  public typealias ValueType = Foundation.URL
}
extension UIColor {
  convenience public init?(ub_hexString hex: Swift.String)
  public var ub_hexString: Swift.String? {
    get
  }
}
extension UIColor {
}
public typealias UBUserDefaultValue = dp3t_lib_ios.UBUserDefaultsRetrievable & dp3t_lib_ios.UBUserDefaultsStorable
public protocol UBUserDefaultsStorable {
  func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
}
public protocol UBUserDefaultsRetrievable {
  static func retrieve(from userDefaults: Foundation.UserDefaults, key: Swift.String, defaultValue: Self) -> Self
  static func retrieveOptional(from userDefaults: Foundation.UserDefaults, key: Swift.String) -> Self?
}
public protocol UBPListValue : dp3t_lib_ios.UBUserDefaultsRetrievable, dp3t_lib_ios.UBUserDefaultsStorable {
}
extension UBPListValue {
  public func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
  public static func retrieve(from userDefaults: Foundation.UserDefaults, key: Swift.String, defaultValue: Self) -> Self
  public static func retrieveOptional(from userDefaults: Foundation.UserDefaults, key: Swift.String) -> Self?
}
extension Data : dp3t_lib_ios.UBPListValue {
}
extension NSData : dp3t_lib_ios.UBPListValue {
}
extension String : dp3t_lib_ios.UBPListValue {
}
extension NSString : dp3t_lib_ios.UBPListValue {
}
extension Date : dp3t_lib_ios.UBPListValue {
}
extension NSDate : dp3t_lib_ios.UBPListValue {
}
extension NSNumber : dp3t_lib_ios.UBPListValue {
}
extension Bool : dp3t_lib_ios.UBPListValue {
}
extension Int : dp3t_lib_ios.UBPListValue {
}
extension Int8 : dp3t_lib_ios.UBPListValue {
}
extension Int16 : dp3t_lib_ios.UBPListValue {
}
extension Int32 : dp3t_lib_ios.UBPListValue {
}
extension Int64 : dp3t_lib_ios.UBPListValue {
}
extension UInt : dp3t_lib_ios.UBPListValue {
}
extension UInt8 : dp3t_lib_ios.UBPListValue {
}
extension UInt16 : dp3t_lib_ios.UBPListValue {
}
extension UInt32 : dp3t_lib_ios.UBPListValue {
}
extension UInt64 : dp3t_lib_ios.UBPListValue {
}
extension Double : dp3t_lib_ios.UBPListValue {
}
extension Float : dp3t_lib_ios.UBPListValue {
}
extension Array : dp3t_lib_ios.UBPListValue where Element : dp3t_lib_ios.UBPListValue {
}
extension Array : dp3t_lib_ios.UBUserDefaultValue where Element : dp3t_lib_ios.UBUserDefaultsRetrievable, Element : dp3t_lib_ios.UBUserDefaultsStorable {
  public static func retrieve(from userDefaults: Foundation.UserDefaults, key: Swift.String, defaultValue: [Element]) -> [Element]
  public static func retrieveOptional(from userDefaults: Foundation.UserDefaults, key: Swift.String) -> [Element]?
  public func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
}
extension Dictionary : dp3t_lib_ios.UBPListValue where Key == Swift.String, Value : dp3t_lib_ios.UBPListValue {
}
extension Dictionary : dp3t_lib_ios.UBUserDefaultValue where Key == Swift.String, Value : dp3t_lib_ios.UBPListValue {
  public func store(in userDefaults: Foundation.UserDefaults, key: Swift.String)
}
public enum Enviroment {
  case prod
  case dev
  public static func == (a: dp3t_lib_ios.Enviroment, b: dp3t_lib_ios.Enviroment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct UserData : Swift.Codable {
  public init(name: Swift.String? = nil, phoneNumber: Swift.String? = nil, country: Swift.String? = nil, idType: Swift.String? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIView {
  public func ub_addShadow(with color: UIKit.UIColor = UIColor.black, radius: CoreGraphics.CGFloat, opacity: CoreGraphics.CGFloat, xOffset: CoreGraphics.CGFloat, yOffset: CoreGraphics.CGFloat)
  @objc dynamic public func ub_setContentPriorityRequired()
}
extension dp3t_lib_ios.NSLabelType : Swift.Equatable {}
extension dp3t_lib_ios.NSLabelType : Swift.Hashable {}
extension dp3t_lib_ios.DP3TMode : Swift.Hashable {}
extension dp3t_lib_ios.UBKeychainAccessibility : Swift.Equatable {}
extension dp3t_lib_ios.UBKeychainAccessibility : Swift.Hashable {}
extension dp3t_lib_ios.Enviroment : Swift.Equatable {}
extension dp3t_lib_ios.Enviroment : Swift.Hashable {}
